death_date = lubridate::mdy(death_date),
hospitalization_date = lubridate::mdy(hospitalization_date),
reporting_week = ISOweek::ISOweek(reporting_date),
death_week = ISOweek::ISOweek(death_date),
hospitalization_week = ISOweek::ISOweek(hospitalization_date),
) |>
dplyr::select(-reporting_date, -death_date, -hospitalization_date)
factors <- list(
disease = sort(unique(epi_data11$disease)),
district = sort(unique(epi_data11$district)),
week = get_all_weeks(
c(epi_data11$reporting_week, epi_data11$death_week,
epi_data11$hospitalization_week)
)
)
combinations <- purrr::cross_df(factors)
factor_combinations =combinations
indicator_types
epi_indicators <- NULL
for (ity in indicator_types) {
indicator <- epi_data11
# Filter case definition.
if (!is.null(case_definitions)) {
indicator <- indicator |>
dplyr::filter(case_classification %in% case_definitions)
}
indicator <- indicator |>
dplyr::select(-case_classification)
# Use the generic variable name `week` instead of indicator-sepicifc names.
indicator$week <- indicator[[week_types[[ity]]]]
for (ity1 in indicator_types) {
indicator[[week_types[[ity1]]]] <- NULL
}
if (ity %in%
c("case count", "death count", "hospitalization count")) {
indicator <- indicator |> dplyr::filter(!is.na(week))
} else {
stop("Unknown indicator type: ", ity)
}
# Count occurrences of combinations, and  count 0 for combinations not in
# the raw data.
indicator <- indicator |>
dplyr::count(across(), name = "indicator_value") |>
dplyr::right_join(
factor_combinations
) |>
dplyr::mutate(
indicator_value = dplyr::if_else(
is.na(indicator_value), 0L, indicator_value
)
) |>
dplyr::mutate(indicator_type = ity)
epi_indicators <- epi_indicators |> dplyr::bind_rows(indicator)
}
names(epi_indicators)
Merged = merge(epi_indicators,LocationData, by = "district")%>% distinct()
names(Merged)
groupBy = "Country"
if(groupBy == "Country"){
GroupedByData = Merged %>%
group_by(disease,indicator_type,week,person.address.country) %>%
summarise(indicator_value = sum(indicator_value, na.rm = T))%>%
mutate(district = person.address.country) %>%
select("disease","district","week","indicator_value", "indicator_type")
}
GroupedByData
}
TTT = groupByFunction(reactive_epi_data_raw1,epi_data_raw,groupBy = "Country"){
groupByFunction = function(reactive_epi_data_raw1,epi_data_raw,groupBy = "Country"){
## gets locations data from the raw data
LocationData = epi_data_raw %>%
select(person.address.country,responsibleRegion,responsibleDistrict,person.address.city)%>%
distinct()
## changing city name to district cause thats how its been used in the previous code
names(LocationData)[4] = "district"
epi_data11 <- reactive_epi_data_raw1 |>
dplyr::select(disease, reportDate, person.address.city, caseClassification,
# dplyr::select(disease,person.address.country,responsibleRegion,responsibleDistrict, reportDate, person.address.city, caseClassification,
person.deathDate, hospitalization.admissionDate) |>
dplyr::rename(
reporting_date = reportDate,
district = person.address.city,
case_classification = caseClassification,
death_date = person.deathDate,
hospitalization_date = hospitalization.admissionDate
) |>
dplyr::mutate(
reporting_date = lubridate::mdy(reporting_date),
death_date = lubridate::mdy(death_date),
hospitalization_date = lubridate::mdy(hospitalization_date),
reporting_week = ISOweek::ISOweek(reporting_date),
death_week = ISOweek::ISOweek(death_date),
hospitalization_week = ISOweek::ISOweek(hospitalization_date),
) |>
dplyr::select(-reporting_date, -death_date, -hospitalization_date)
factors <- list(
disease = sort(unique(epi_data11$disease)),
district = sort(unique(epi_data11$district)),
week = get_all_weeks(
c(epi_data11$reporting_week, epi_data11$death_week,
epi_data11$hospitalization_week)
)
)
combinations <- purrr::cross_df(factors)
factor_combinations =combinations
indicator_types
epi_indicators <- NULL
for (ity in indicator_types) {
indicator <- epi_data11
# Filter case definition.
if (!is.null(case_definitions)) {
indicator <- indicator |>
dplyr::filter(case_classification %in% case_definitions)
}
indicator <- indicator |>
dplyr::select(-case_classification)
# Use the generic variable name `week` instead of indicator-sepicifc names.
indicator$week <- indicator[[week_types[[ity]]]]
for (ity1 in indicator_types) {
indicator[[week_types[[ity1]]]] <- NULL
}
if (ity %in%
c("case count", "death count", "hospitalization count")) {
indicator <- indicator |> dplyr::filter(!is.na(week))
} else {
stop("Unknown indicator type: ", ity)
}
# Count occurrences of combinations, and  count 0 for combinations not in
# the raw data.
indicator <- indicator |>
dplyr::count(across(), name = "indicator_value") |>
dplyr::right_join(
factor_combinations
) |>
dplyr::mutate(
indicator_value = dplyr::if_else(
is.na(indicator_value), 0L, indicator_value
)
) |>
dplyr::mutate(indicator_type = ity)
epi_indicators <- epi_indicators |> dplyr::bind_rows(indicator)
}
names(epi_indicators)
Merged = merge(epi_indicators,LocationData, by = "district")%>% distinct()
names(Merged)
groupBy = "Country"
if(groupBy == "Country"){
GroupedByData = Merged %>%
group_by(disease,indicator_type,week,person.address.country) %>%
summarise(indicator_value = sum(indicator_value, na.rm = T))%>%
mutate(district = person.address.country) %>%
select("disease","district","week","indicator_value", "indicator_type")
}
GroupedByData
}
TTT = groupByFunction(reactive_epi_data_raw1,epi_data_raw,groupBy = "Country")
View(TTT)
runApp()
groupByFunction_prepare_display = function(reactive_epi_data_raw1,epi_data_raw,groupBy = "Country"){
## gets locations data from the raw data
LocationData = epi_data_raw %>%
select(person.address.country,responsibleRegion,responsibleDistrict,person.address.city)%>%
distinct()
## changing city name to district cause thats how its been used in the previous code
names(LocationData)[4] = "district"
epi_data11 <- reactive_epi_data_raw1 |>
dplyr::select(disease, reportDate, person.address.city, caseClassification,
# dplyr::select(disease,person.address.country,responsibleRegion,responsibleDistrict, reportDate, person.address.city, caseClassification,
person.deathDate, hospitalization.admissionDate) |>
dplyr::rename(
reporting_date = reportDate,
district = person.address.city,
case_classification = caseClassification,
death_date = person.deathDate,
hospitalization_date = hospitalization.admissionDate
) |>
dplyr::mutate(
reporting_date = lubridate::mdy(reporting_date),
death_date = lubridate::mdy(death_date),
hospitalization_date = lubridate::mdy(hospitalization_date),
reporting_week = ISOweek::ISOweek(reporting_date),
death_week = ISOweek::ISOweek(death_date),
hospitalization_week = ISOweek::ISOweek(hospitalization_date),
) |>
dplyr::select(-reporting_date, -death_date, -hospitalization_date)
factors <- list(
disease = sort(unique(epi_data11$disease)),
district = sort(unique(epi_data11$district)),
week = get_all_weeks(
c(epi_data11$reporting_week, epi_data11$death_week,
epi_data11$hospitalization_week)
)
)
combinations <- purrr::cross_df(factors)
factor_combinations =combinations
indicator_types
epi_indicators <- NULL
for (ity in indicator_types) {
indicator <- epi_data11
# Filter case definition.
if (!is.null(case_definitions)) {
indicator <- indicator |>
dplyr::filter(case_classification %in% case_definitions)
}
indicator <- indicator |>
dplyr::select(-case_classification)
# Use the generic variable name `week` instead of indicator-sepicifc names.
indicator$week <- indicator[[week_types[[ity]]]]
for (ity1 in indicator_types) {
indicator[[week_types[[ity1]]]] <- NULL
}
if (ity %in%
c("case count", "death count", "hospitalization count")) {
indicator <- indicator |> dplyr::filter(!is.na(week))
} else {
stop("Unknown indicator type: ", ity)
}
# Count occurrences of combinations, and  count 0 for combinations not in
# the raw data.
indicator <- indicator |>
dplyr::count(across(), name = "indicator_value") |>
dplyr::right_join(
factor_combinations
) |>
dplyr::mutate(
indicator_value = dplyr::if_else(
is.na(indicator_value), 0L, indicator_value
)
) |>
dplyr::mutate(indicator_type = ity)
epi_indicators <- epi_indicators |> dplyr::bind_rows(indicator)
}
names(epi_indicators)
Merged = merge(epi_indicators,LocationData, by = "district")%>% distinct()
names(Merged)
groupBy = "Country"
if(groupBy == "Country"){
GroupedByData = Merged %>%
group_by(disease,indicator_type,week,person.address.country) %>%
summarise(indicator_value = sum(indicator_value, na.rm = T))%>%
mutate(district = person.address.country) %>%
select("disease","district","week","indicator_value", "indicator_type")
}
GroupedByData
}
runApp()
View(TTT)
runApp()
runApp()
runApp()
## gets locations data from the raw data
LocationData = epi_data_raw %>%
select(person.address.country,responsibleRegion,responsibleDistrict,person.address.city)%>%
distinct()
## changing city name to district cause thats how its been used in the previous code
names(LocationData)[4] = "district"
## moved data above so we can get list of countries
## then apply location filters on it
epi_data_raw <- tibble::as_tibble(
read.csv2(
paste0(epi_data_path, "/", epi_data_file_name),
skip = 1,
stringsAsFactors=FALSE,
fileEncoding="latin1"
)
)
## gets locations data from the raw data
LocationData = epi_data_raw %>%
select(person.address.country,responsibleRegion,responsibleDistrict,person.address.city)%>%
distinct()
names(LocationData)
## changing city name to district cause thats how its been used in the previous code
names(LocationData)[4] = "district"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(Temp)
names(Temp)[2] = input$selectGroupBy
names(Temp)
runApp()
names(Temp)
runApp()
runApp()
runApp()
runApp()
View(Temp1)
runApp()
View(Temp1)
View(Temp2)
View(Temp1)
View(Temp2)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
View(reactive_epi_data_raw1)
View(reactive_epi_indicators1)
names(reactive_epi_indicators1)
RiskScore = reactive_epi_indicators1 %>%
group_by(week,indicator_type) %>%
summarise(RS = mean(indicator_type))
View(RiskScore)
RiskScore = reactive_epi_indicators1 %>%
group_by(week,indicator_type) %>%
summarise(RS = mean(indicator_type, na.rm =T))
names(reactive_epi_indicators1)
RiskScore = reactive_epi_indicators1 %>%
group_by(week,indicator_type) %>%
summarise(RS = mean(indicator_value, na.rm =T))
unique(RiskScore$indicator_type)
case_weight <- 0.5
death_weight <- 0.3
hosp_weight <- 0.2
RiskScore = reactive_epi_indicators1 %>%
group_by(week,indicator_type) %>%
summarise(RS = mean(indicator_value, na.rm =T))
unique(RiskScore$indicator_type)
RiskScore$RS[RiskScore$indicator_type == "case count"] = RiskScore$RS[RiskScore$indicator_type == "case count"]* case_weight
RiskScore$RS[RiskScore$indicator_type == "death count"] = RiskScore$RS[RiskScore$indicator_type == "death count"]* death_weight
RiskScore$RS[RiskScore$indicator_type == "hospitalization count"] =  RiskScore$RS[RiskScore$indicator_type == "hospitalization count"] * hosp_weight
RiskScore %>%
group_by(week) %>%
summarise(RS = sum(RS, na.rm = T))
RiskScore %>%
group_by(week) %>%
summarise(RS = sum(RS, na.rm = T)%>% round(3) )
RiskScore = RiskScore %>%
group_by(week) %>%
summarise(RS = sum(RS, na.rm = T)%>% round(3) )
names(reactive_epi_indicators1)
RiskScore = reactive_epi_indicators1 %>%
group_by(district,week,indicator_type) %>%
summarise(RS = mean(indicator_value, na.rm =T))
RiskScore = reactive_epi_indicators1 %>%
group_by(district,week,indicator_type) %>%
summarise(RS = mean(indicator_value, na.rm =T))
unique(RiskScore$indicator_type)
RiskScore$RS[RiskScore$indicator_type == "case count"] = RiskScore$RS[RiskScore$indicator_type == "case count"]* case_weight
RiskScore$RS[RiskScore$indicator_type == "death count"] = RiskScore$RS[RiskScore$indicator_type == "death count"]* death_weight
RiskScore$RS[RiskScore$indicator_type == "hospitalization count"] =  RiskScore$RS[RiskScore$indicator_type == "hospitalization count"] * hosp_weight
RiskScore = RiskScore %>%
group_by(district,week) %>%
summarise(RS = sum(RS, na.rm = T)%>% round(3) )
RiskScore = reactive_epi_indicators1 %>%
group_by(district,week,indicator_type) %>%
summarise(RS = mean(indicator_value, na.rm =T))
unique(RiskScore$indicator_type)
RiskScore$RS[RiskScore$indicator_type == "case count"] = RiskScore$RS[RiskScore$indicator_type == "case count"]* case_weight
RiskScore$RS[RiskScore$indicator_type == "death count"] = RiskScore$RS[RiskScore$indicator_type == "death count"]* death_weight
RiskScore$RS[RiskScore$indicator_type == "hospitalization count"] =  RiskScore$RS[RiskScore$indicator_type == "hospitalization count"] * hosp_weight
RiskScore = RiskScore %>%
group_by(district,week) %>%
summarise(RS = sum(RS, na.rm = T)%>% round(3) )
runApp()
runApp()
runApp()
View(RS1)
RS = RS1
Temp =   RS
Temp = merge(Temp,LocationData, by = "district")%>% distinct()
## package added
library(tidyverse)
library(shinydashboard)
library(shinyWidgets)
library(ggeasy)
library(knitr)
## moved data above so we can get list of countries
## then apply location filters on it
epi_data_raw <- tibble::as_tibble(
read.csv2(
paste0(epi_data_path, "/", epi_data_file_name),
skip = 1,
stringsAsFactors=FALSE,
fileEncoding="latin1"
)
)
## gets locations data from the raw data
LocationData = epi_data_raw %>%
select(person.address.country,responsibleRegion,responsibleDistrict,person.address.city)%>%
distinct()
## changing city name to district cause thats how its been used in the previous code
names(LocationData)[4] = "district"
RS = RS1
Temp =   RS
Temp = merge(Temp,LocationData, by = "district")%>% distinct()
View(Temp)
names(Temp)
Temp22 = Temp %>%
group_by(week,person.address.country) %>%
summarise(RS = sum(RS, na.rm = T))%>%
mutate(district = person.address.country) %>%
select("district","week","RS")
View(Temp22)
names(reactive_epi_indicators1)
Temp = merge(reactive_epi_indicators1,LocationData, by = "district")%>% distinct()
RiskScore = Temp %>%
group_by(district,week,indicator_type) %>%
summarise(RS = mean(indicator_value, na.rm =T))
RiskScore = Temp %>%
group_by(person.address.country,week,indicator_type) %>%
summarise(RS = mean(indicator_value, na.rm =T))
RiskScore = Temp %>%
group_by(responsibleRegion,week,indicator_type) %>%
summarise(RS = mean(indicator_value, na.rm =T))
RiskScore = Temp %>%
group_by(responsibleDistrict,week,indicator_type) %>%
summarise(RS = mean(indicator_value, na.rm =T))
RiskScore = Temp %>%
group_by(responsibleDistrict,week,indicator_type) %>%
summarise(RS = mean(indicator_value, na.rm =T))
# unique(RiskScore$indicator_type)
RiskScore$RS[RiskScore$indicator_type == "case count"] = RiskScore$RS[RiskScore$indicator_type == "case count"]* case_weight
RiskScore$RS[RiskScore$indicator_type == "death count"] = RiskScore$RS[RiskScore$indicator_type == "death count"]* death_weight
RiskScore$RS[RiskScore$indicator_type == "hospitalization count"] =  RiskScore$RS[RiskScore$indicator_type == "hospitalization count"] * hosp_weight
names(RiskScore) = "district"
RiskScore = RiskScore %>%
group_by(district,week) %>%
summarise(RS = sum(RS, na.rm = T)%>% round(3) )
RiskScore = Temp %>%
group_by(responsibleDistrict,week,indicator_type) %>%
summarise(RS = mean(indicator_value, na.rm =T))
# unique(RiskScore$indicator_type)
RiskScore$RS[RiskScore$indicator_type == "case count"] = RiskScore$RS[RiskScore$indicator_type == "case count"]* case_weight
RiskScore$RS[RiskScore$indicator_type == "death count"] = RiskScore$RS[RiskScore$indicator_type == "death count"]* death_weight
RiskScore$RS[RiskScore$indicator_type == "hospitalization count"] =  RiskScore$RS[RiskScore$indicator_type == "hospitalization count"] * hosp_weight
names(RiskScore)[1] = "district"
RiskScore = RiskScore %>%
group_by(district,week) %>%
summarise(RS = sum(RS, na.rm = T)%>% round(3) )
runApp()
View(RS1)
runApp()
View(RS1)
runApp()
View(RS22)
runApp()
runApp()
runApp()
View(TempAA)
View(RSAA)
unique(TempAA$district)
unique(RSAA$district)
unique(RSAA$week)
unique(RSAA$week)
TempAA1 = distinct(TempAA)
RSAA1 = distinct(RSAA)
View(RSAA)
TempAA1 = TempAA%>%
group_by(district,week)%>%
summarise(Count = n())
RSAA1 = RSAA1%>%
group_by(district,week)%>%
summarise(Count = n())
View(RSAA1)
View(RSAA1)
View(TempAA1)
RSAA1 = RSAA%>%
group_by(district,week)%>%
summarise(Count = n())
TempT = merge(TempAA,RSAA, by = c("district","week"))
str(TempAA)
TempT = merge(as.data.frame(TempAA),as.data.frame(RSAA), by = c("district","week"))
str(TempAA)
TempAA = as.data.frame(TempAA)
RSAA = as.data.frame(RSAA)
str(TempAA)
str(RSAA)
View(epi_risks1)
View(epi_risks_display1)
RSAA$week = ISOweek::ISOweek2date(paste0(RSAA$week, "-1"))
TempT = merge(as.data.frame(TempAA),as.data.frame(RSAA), by = c("district","week"))
View(TempT)
runApp()
runApp()
runApp()
install.packages("tinytex")
run tinytex::install_tinytex()
tinytex::install_tinytex()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
