
node {
    def tag_latest = false    
    
    if (getBinding().hasVariable("TAG_LATEST")) {
    	tag_latest = Boolean.parseBoolean(TAG_LATEST)        
    }
    

    echo "TAG_LATEST=${tag_latest}"
    
        
    stage('checkout') {
        git branch: '${BRANCH}', url: 'https://github.com/hzi-braunschweig/SORMAS-Stats-next-gen.git'
    }
    
    stage('Build base image') {
        if (params.BUILD_BASE != null && params.BUILD_BASE) {
	        echo 'Build base image....'
	    	build job: 'Build_SORMAS_Stats_Base', parameters:  [string(name: "BRANCH", value: env.BRANCH), string(name: "TAG", value: env.TAG), booleanParam(name: "TAG_LATEST", value: tag_latest)  ]
    	}
    	else {
    	    echo 'Skipping base image....'
    	}


    }
    stage('Build stats image') {
    	if (params.BUILD_SINGLE != null && params.BUILD_SINGLE) {
	    	withCredentials([ usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKERUSER', passwordVariable: 'DOCKERPASS' )]) {
	    		dir('sormas-stats-shinyapp') {
	    		    echo 'Build stats single image....'
		    		sh """
		            sudo docker build -f stats.Dockerfile --pull --no-cache --build-arg BRANCH=${BRANCH} -t sormas-stats:${BRANCH} .
		            sudo docker login -u '${DOCKERUSER}' -p '${DOCKERPASS}' docker.io
		            sudo docker tag sormas-stats:${BRANCH} docker.io/hzibraunschweig/sormas-stats:${TAG}
		            sudo docker push docker.io/hzibraunschweig/sormas-stats:${TAG}
		            sudo docker logout docker.io
		            echo 'Finished'
		            """          
	    		}
	    	}
    	}
    	else {
    	    echo 'Build stats image....'
			build job: 'Build_SORMAS_Stats', parameters:  [string(name: "BRANCH", value: env.BRANCH), string(name: "TAG", value: env.TAG), booleanParam(name: "TAG_LATEST", value: tag_latest)  ]
    	}
    }
    
    def credentials_id = params.CREDENTIALS_ID
    
    stage('Deploy to server') {
        withCredentials([ usernamePassword(credentialsId: credentials_id, usernameVariable: 'ANSIBLE_USER', passwordVariable: 'ANSIBLE_PASS' )]) {
	    	sh """
	    	job_result=\$(awx --conf.host 'https://${ANSIBLE_TOWER}' --conf.username ${ANSIBLE_USER} --conf.password ${ANSIBLE_PASS} \
	           job_templates launch --monitor --wait --inventory ${ANSIBLE_INVENTORY} --extra_vars "stats_image: docker.io/hzibraunschweig/sormas-stats:${TAG}" --limit '${SERVER_LIMIT}' 316)
	        echo \$job_result
	    	"""       
    	}              
    }
    


    
}